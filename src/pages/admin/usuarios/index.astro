---
import AdminLayout from '../../../layouts/AdminLayout.astro';
---

<AdminLayout title="Gestión de Usuarios">
    <div class="mb-6 flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-800">Gestión de Usuarios</h1>
        <button id="btnNuevoUsuario" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Nuevo Usuario
        </button>
    </div>

    <!-- Formulario para crear/editar usuario (oculto por defecto) -->
    <div id="formUsuario" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
        <h2 id="formTitle" class="text-xl font-semibold mb-4">Nuevo Usuario</h2>
        <form id="usuarioForm" class="space-y-4">
            <input type="hidden" id="userId" value="">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre Completo</label>
                    <input type="text" id="nombre" name="nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="usuario" class="block text-sm font-medium text-gray-700 mb-1">Usuario</label>
                    <input type="text" id="usuario" name="usuario" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
                    <input type="password" id="password" name="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="rol" class="block text-sm font-medium text-gray-700 mb-1">Rol</label>
                    <select id="rol" name="rol" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        <option value="admin">Administrador</option>
                        <option value="editor">Editor</option>
                        <option value="vendedor">Vendedor</option>
                    </select>
                </div>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" id="btnCancelar" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">Cancelar</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Guardar</button>
            </div>
        </form>
    </div>

    <!-- Tabla de usuarios -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuario</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Creación</th>
                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
            </thead>
            <tbody id="tablaUsuarios" class="bg-white divide-y divide-gray-200">
                <!-- Los usuarios se cargarán aquí dinámicamente -->
            </tbody>
        </table>
    </div>
</AdminLayout>

<script>
    // Verificar si el usuario está autenticado
    document.addEventListener('DOMContentLoaded', () => {
        const isLoggedIn = localStorage.getItem('isLoggedIn');
        
        if (!isLoggedIn || isLoggedIn !== 'true') {
            // Redirigir al login si no está autenticado
            window.location.href = '/login';
            return;
        }

        // Elementos del DOM
        const btnNuevoUsuario = document.getElementById('btnNuevoUsuario');
        const formUsuario = document.getElementById('formUsuario');
        const formTitle = document.getElementById('formTitle');
        const usuarioForm = document.getElementById('usuarioForm');
        const btnCancelar = document.getElementById('btnCancelar');
        const tablaUsuarios = document.getElementById('tablaUsuarios');
        const userId = document.getElementById('userId');

        // Obtener usuarios del localStorage o inicializar si no existen
        let usuarios = JSON.parse(localStorage.getItem('usuarios')) || [];
        
        // Si no hay usuarios, crear uno por defecto
        if (usuarios.length === 0) {
            usuarios = [
                {
                    id: 1,
                    nombre: 'Administrador',
                    usuario: 'admin',
                    password: 'admin123',
                    rol: 'admin',
                    fechaCreacion: new Date().toISOString()
                }
            ];
            localStorage.setItem('usuarios', JSON.stringify(usuarios));
        }

        // Cargar usuarios en la tabla
        function cargarUsuarios() {
            tablaUsuarios.innerHTML = '';
            
            usuarios.forEach(usuario => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${usuario.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${usuario.nombre}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${usuario.usuario}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-${usuario.rol === 'admin' ? 'green' : usuario.rol === 'editor' ? 'blue' : 'yellow'}-100 text-${usuario.rol === 'admin' ? 'green' : usuario.rol === 'editor' ? 'blue' : 'yellow'}-800">
                            ${usuario.rol === 'admin' ? 'Administrador' : usuario.rol === 'editor' ? 'Editor' : 'Vendedor'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(usuario.fechaCreacion).toLocaleDateString()}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button data-id="${usuario.id}" class="btn-editar text-blue-600 hover:text-blue-900 mr-3">Editar</button>
                        <button data-id="${usuario.id}" class="btn-eliminar text-red-600 hover:text-red-900">Eliminar</button>
                    </td>
                `;
                tablaUsuarios.appendChild(tr);
            });

            // Agregar eventos a los botones de editar y eliminar
            document.querySelectorAll('.btn-editar').forEach(btn => {
                btn.addEventListener('click', editarUsuario);
            });

            document.querySelectorAll('.btn-eliminar').forEach(btn => {
                btn.addEventListener('click', eliminarUsuario);
            });
        }

        // Mostrar formulario para nuevo usuario
        btnNuevoUsuario.addEventListener('click', () => {
            formTitle.textContent = 'Nuevo Usuario';
            usuarioForm.reset();
            userId.value = '';
            formUsuario.classList.remove('hidden');
        });

        // Cancelar formulario
        btnCancelar.addEventListener('click', () => {
            formUsuario.classList.add('hidden');
            usuarioForm.reset();
        });

        // Editar usuario
        function editarUsuario(e) {
            const id = parseInt(e.target.dataset.id);
            const usuario = usuarios.find(u => u.id === id);
            
            if (usuario) {
                formTitle.textContent = 'Editar Usuario';
                userId.value = usuario.id;
                document.getElementById('nombre').value = usuario.nombre;
                document.getElementById('usuario').value = usuario.usuario;
                document.getElementById('password').value = usuario.password;
                document.getElementById('rol').value = usuario.rol;
                
                formUsuario.classList.remove('hidden');
            }
        }

        // Eliminar usuario
        function eliminarUsuario(e) {
            const id = parseInt(e.target.dataset.id);
            if (confirm('¿Está seguro de eliminar este usuario?')) {
                usuarios = usuarios.filter(u => u.id !== id);
                localStorage.setItem('usuarios', JSON.stringify(usuarios));
                cargarUsuarios();
            }
        }

        // Guardar usuario (crear o actualizar)
        usuarioForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const id = userId.value ? parseInt(userId.value) : null;
            const nombre = document.getElementById('nombre').value;
            const usuario = document.getElementById('usuario').value;
            const password = document.getElementById('password').value;
            const rol = document.getElementById('rol').value;
            
            if (id) {
                // Actualizar usuario existente
                const index = usuarios.findIndex(u => u.id === id);
                if (index !== -1) {
                    usuarios[index] = {
                        ...usuarios[index],
                        nombre,
                        usuario,
                        password,
                        rol
                    };
                }
            } else {
                // Crear nuevo usuario
                const nuevoId = usuarios.length > 0 ? Math.max(...usuarios.map(u => u.id)) + 1 : 1;
                usuarios.push({
                    id: nuevoId,
                    nombre,
                    usuario,
                    password,
                    rol,
                    fechaCreacion: new Date().toISOString()
                });
            }
            
            localStorage.setItem('usuarios', JSON.stringify(usuarios));
            formUsuario.classList.add('hidden');
            usuarioForm.reset();
            cargarUsuarios();
        });

        // Cargar usuarios al iniciar
        cargarUsuarios();
    });
</script>